import { getClient } from "@/ApolloClient";
import { gql } from "@apollo/client";

const query = gql`
  query GetAnime($page: Int, $perPage: Int) {
    Page(page: $page, perPage: $perPage) {
      pageInfo {
        currentPage
        lastPage
        hasNextPage
      }
      media(type: ANIME, sort: POPULARITY_DESC) {
        id
        idMal
        episodes
        bannerImage
        title {
          english
        }
        coverImage {
          large
        }
        streamingEpisodes {
          site
          url
        }
      }
    }
  }
`
// @note: This would typically be autogenerated.
//        For the sake of this take-home though, I'm manually setting it.
type MediaItem = {
  id: number
  idMal: number
  episodes: number
  bannerImage: string
  title: {
    english: string
  }
  coverImage: {
    large: string
  }
  streamingEpisodes: {
    site: string
    url: string
  }[]
}

const mapToViewModel = (mediaItem: MediaItem) => {
  return {
    id: mediaItem.id,
    idMal: mediaItem.idMal,
    title: mediaItem.title.english,
    episodeCount: mediaItem.episodes,
    imgSrc: mediaItem.coverImage.large,
    bannerImgSrc: mediaItem.bannerImage,
    streamingEpisodes: mediaItem.streamingEpisodes
  }
}

export async function getAnimeCards(page: number, perPage = 6) {
  const { data } = await getClient().query({
    query,
    variables: { page, perPage },
  })

  const mappedItems: ReturnType<typeof mapToViewModel>[] = data.Page.media.map(mapToViewModel)

  return {
    items: mappedItems,

    // @note: This type would typically be autogenerated.
    //        For the sake of this take-home though, casting it should be fine.
    pageInfo: data.Page.pageInfo as { currentPage: number; lastPage: number; hasNextPage: boolean }
  }
}